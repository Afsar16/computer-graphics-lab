//8. ScanlinePolygonFill.cpp 
#include<stdio.h>
#include<GL/glut.h>
float le[400], re[400], flag = 0, m;
void init()
{
	glClearColor(1.0, 1.0, 1.0, 1.0);
	gluOrtho2D(0, 400, 0, 400);
}
void edgeDetect(int x0, int y0, int x1, int y1)
{
	int x, i;
	if (y1 < y0)
	{
		y1 = y1 + y0;
		y0 = y1 - y0;
		y1 = y1 - y0;
		x1 = x1 + x0;
		x0 = x1 - x0;
		x1 = x1 - x0;
	}
	x = x0;
	m = (y1 - y0) / (x1 - x0);
	for (i = y0; i < y1; i++)
	{
		if (x < le[i])
			le[i] = x;
		if (x > re[i])
			re[i] = x;
		x += (1 / m);
	}
}
void display()
{
	int i, j;
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(1, 0, 0);
	glBegin(GL_LINE_LOOP);
	glVertex2i(200, 100);
	glVertex2i(300, 200);
	glVertex2i(200, 300);
	glVertex2i(100, 200);
	glEnd();
	for (i = 0; i < 400; i++)
	{
		le[i] = 400;
		re[i] = 0;
	}
	edgeDetect(200, 100, 300, 200);
	edgeDetect(300, 200, 200, 300);
	edgeDetect(200, 300, 100, 200);
	edgeDetect(100, 200, 200, 100);
	if (flag == 1)
	{
		for (i = 0; i < 400; i++)
		{
			if (le[i] < re[i])
			{
				for (j = le[i]; j < re[i]; j++)
				{
					glPointSize(2.0);
					glColor3f(1.0, 0.0, 1.0);
					glBegin(GL_POINTS);
					glVertex2i(j, i);
					glEnd();
					glFlush();
				}
			}
		}
	}
	glFlush();
}
void menuid(int id)
{
	switch (id)
	{
	case 1: flag = 1;
		display();
		break;
	case 2: flag = 0;
		display();
		break;
	case 3: exit(0);
		break;
	}
}
int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(500, 500);
	glutCreateWindow("SCAN LINE POLYGON FILL");
	init();
	glutDisplayFunc(display);
	glutCreateMenu(menuid);
	glutAddMenuEntry("Fill Polygon", 1);
	glutAddMenuEntry("Clear Polygon", 2);
	glutAddMenuEntry("Exit", 3);
	glutAttachMenu(GLUT_RIGHT_BUTTON);
	glutMainLoop();
	return 0;
}